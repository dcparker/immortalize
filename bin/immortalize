#!/usr/bin/env ruby

# Usage:
#   immortalize run "command --with-args --etc"
#   immortalize remove "command --with-args --etc"
#   immortalize inspect
#   immortalize # << run this from a cron job every minute to check and restart failed processes. 
#   * starts process
#   * logs the start command with pid
#   * when run from cron (without args), check all logged start commands and currently logged pid to see if it's running
#     * if not running, immediately remove pid from log, but leave command; start process again via: immortalize "command --with-args --etc"
require 'time'
require 'yaml'
require 'sha1'
require 'optparse'
$options = {}

require 'rubygems'
require 'merb-core'
require 'merb-mailer'
Merb::Mailer.delivery_method = :sendmail

$log_location = "#{ENV['HOME']}/.immortalize"
`mkdir -p "#{$log_location}"` unless File.directory?($log_location)
$registry_filename = "#{$log_location}/registry.yaml"
File.open($registry_filename, 'w'){|f| f << {}.to_yaml} unless File.exists?($registry_filename)
$registry = YAML.load_file($registry_filename)

optparse = OptionParser.new do |opts|
  opts.banner = <<-ENDBANNER
Usage: #{$0} [run|remove|inspect] [options]

To add (and start) a command:
#{$0} run "command" --notification_recipient admin@email.com --max_failures 5
To change a command's options, just re-add it.

To remove a command:
#{$0} remove "command"

To inspect the current list of immortal commands:
#{$0} list

To install the immortalize cron job (which does the actual work):
immortalize setup

Run this command with no arguments as a cron job, to run every minute:
* * * * * immortalize

Options:
ENDBANNER

  $options[:notification_recipient] = nil
  opts.on( '--notify=EMAIL', "The email address to which failure notifications should be sent." ) do |email|
    $options[:notification_recipient] = email
  end

  $options[:max_failures] = 5
  opts.on('--max_failures=NUM', "Notify on NUM or more failures within an hour (default 5)") do |num|
    $options[:max_failures] = num.to_i
  end

  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end

optparse.parse!
$action = ARGV[0]

def notify(immortal, message)
  m = Merb::Mailer.new(
    :to      => immortal[:notification_recipient],
    :from    => "immortalize@video.iremix.org",
    :subject => "ImmortalCommand `#{immortal[:command]}' keeps dying!",
    :text    => message
  )
  m.deliver!
end

class Time
  def beginning_of_day
    Time.mktime(year, month, day).send(gmt? ? :gmt : :localtime)
  end
end

class Immortal
  def self.new(identifier)
    if $registry[identifier]
      obj = allocate
      obj.send :initialize, identifier
      obj
    else
      puts "tried:\n\t#{identifier}commands:\n\t#{$registry.values.map {|r| r[:command]}.join("\n\t")}"
    end
  end

  attr_reader :identifier
  def initialize(identifier)
    @identifier = identifier
    @reg = $registry[identifier]
  end

  def [](key)
    @reg[key]
  end

  def running?
    @reg[:pid] && `ps #{@reg[:pid]} | grep "#{@reg[:pid]}" | grep -v "grep"` =~ /#{@reg[:pid]}/
  end

  def failures
    @failures ||= File.exists?(failure_log_file) ? File.readlines(failure_log_file).map {|t| Time.parse(t) } : []
  end

  def start!
    # Run the command and gather the pid
    pid = nil
    open("|echo \"#{@reg[:command]}\" 1>/dev/null 2>&1 | sh & echo $!") do |f|
      pid = f.sysread(5).chomp.to_i
    end
    # Log the pid
    puts "pid #{pid}"
    $registry[identifier][:pid] = pid
  end
  def stop!
    if running?
      pid = $registry[identifier].delete(:pid)
      `kill -INT #{pid}`
      puts "attempted to kill pid #{pid}: \"#{@reg[:command]}\""
    else
      warn "\"#{@reg[:command]}\" not running!"
      false
    end
  end

  def failed!
    failures << Time.now
    File.open(failure_log_file, 'a') do |log|
      log << "#{Time.now}\n"
    end
  end

  def frequent_failures?
    # If it failed :max_failures times or more within the last hour.
    failures.length >= self[:max_failures] && failures[0-self[:max_failures]] > Time.now - 3600
  end
  def failures_today
    failures.select {|f| f > Time.now.beginning_of_day}
  end
  def failures_this_hour
    failures_today.select {|f| f > Time.now - 3600}
  end

  def inspect
    self[:command] + (failures.length >= self[:max_failures].to_i ? "\n\tLast #{self[:max_failures]} failures: #{failures[-5..1]}" : '')
  end

  private
  def failure_log_file
    "#{$log_location}/#{@identifier}"
  end
end

# Curate the command string
if ARGV[1].to_s.length > 1 && ARGV[1] !~ /^\d+$/
  $command_string = ARGV[1]
  # Complain about the string if it does not have proper output redirections
  cmds = $command_string.split(/; ?/)
  last_cmd = cmds.pop
  lst,out_s = last_cmd.split(/(?: \d)? ?>/,2)
  cmds << lst
  outs = last_cmd.scan(/(?: \d)? ?> ?\S+/)
  outs = outs.map {|o| o.sub(/^ ?> ?/,">").sub(/^>/,"1>").sub(/^ /,'') }
  unless outs.any? {|o| o =~ /^2>/}
    warn "Appending default STDERR redirection: 2>&1 (STDERR > STDOUT)"
    outs << "2>&1"
  end
  unless outs.any? {|o| o =~ /^1?>/}
    warn "#{$command_string}\nInvalid command: You need to add proper STDOUT redirection, ex: > /dev/null or 1>log/run.log or 1 > log/run.log"
    exit
  end
  $command_string = cmds.join('; ') + ' ' + outs.join(' ')
end


# Main logic
unless ::Object.const_defined?(:IRB)
  case $action
  when 'setup'
    crons = `crontab -l 2>/dev/null`.split(/\n/)
    immortalize_cmd = `which immortalize`.chomp
    if immortalize_cmd.empty?
      warn "Couldn't find installed version of the 'immortalize' command! (Try `which immortalize`)"
      exit
    end
    crons.reject! {|c| c =~ /immortalize > #{$log_location}\/cron.log/}
    crons << "* * * * * #{immortalize_cmd} > #{$log_location}/cron.log 2>&1\n"
    puts "Installing crons:\n\t#{crons.join("\n\t")}"
    f = IO.popen("crontab -", 'w')
    f << crons.join("\n")
    f.close
    crons = `crontab -l 2>/dev/null`.split(/\n/)
    puts "Installed crons:\n\t#{crons.join("\n\t")}"
  when 'list'
    # puts $registry.inspect
    puts "Immortalized:"
    keys = $registry.keys.sort
    keys.each_with_index do |identifier,i|
      puts "\t#{i+1}) " + Immortal.new(identifier).inspect
    end
    puts "\nTo remove jobs, for example job #1, from this list, run `immortalize remove 1`"
    exit

  when 'stop'
    if ARGV[1] =~ /^\d+$/
      identifier = $registry.keys.sort[ARGV[1].to_i-1]
    else
      identifier = SHA1.hexdigest($command_string)
    end
    immortal = Immortal.new(identifier)
    immortal.stop!
    
  when 'run'
    if $options[:notification_recipient].nil?
      warn "Must include --notify EMAIL_ADDRESS when adding a command!"
      exit
    end

    # Running with a given command.
    identifier = SHA1.hexdigest($command_string)

    # Create the command
    $registry[identifier] ||= {
      :command => $command_string
    }
    $registry[identifier].merge!($options)

    immortal = Immortal.new(identifier)
    # Start the process if it isn't already running
    if immortal.running?
      puts "`#{immortal[:command]}' is already running with pid #{immortal[:pid]}"
    else
      print "Starting `#{immortal[:command]}'... "
      immortal.start!
    end

  when 'remove'
    if ARGV[1] =~ /^\d+$/
      identifier = $registry.keys.sort[ARGV[1].to_i-1]
    else
      identifier = SHA1.hexdigest($command_string)
    end
    reg = $registry.delete(identifier)
    puts "Deleted #{identifier}: \"#{reg[:command]}\""

  when nil
    # Running bare from cron.
    # Check all logged commands with pids.
    puts "[#{Time.now.strftime("%Y-%m-%d %H:%M:%S")}] #{$registry.length} jobs"
    $registry.keys.sort.each_with_index do |identifier,i|
      immortal = Immortal.new(identifier)
    
      # Check if running
      if immortal.running?
        # puts "  #{i+1}) `#{immortal[:command]}' is running fine..."
      else
        puts "  #{i+1}) `#{immortal[:command]}' HAS DIED! Reviving..."
        # Mark the failure
        immortal.failed!
        # Notify if failures have been frequent
        if immortal.frequent_failures?
          puts "  #{i+1}) FREQUENT FAILURE ON #{identifier} (`#{immortal[:command]}')"
          notify(immortal, "ImmortalCommand failure!\n\nCommand `#{immortal[:command]}' failed, threshold is #{immortal[:max_failures]} / hour.\n\n#{immortal.failures_today.size} failures so far today, #{immortal.failures_this_hour.size} in the past hour.")
        end
        # Start it
        immortal.start!
      end
    end
  else
    puts optparse
  end
end

# Save the registry
File.open("#{$log_location}/registry.yaml", 'w') do |r|
  r << $registry.to_yaml
end
